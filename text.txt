Try this code

**SERVICE**

    Pageable pageable = PageRequest.of(page - 1, size);
    Page<ContentResDTO> resDTOPage = contentRepository.findAllBy(contentID, userId, pageable);

**REPOSITORY**

    @Query("SELECT new com.example.demo.dto.content.ContentResDTO(t, COUNT(DISTINCT c.cmtID), COUNT(DISTINCT r.rctId)) " +
                "FROM TMnTrContent t LEFT JOIN TMnTrComment c ON t.cntID = c.content.cntID LEFT JOIN TMnTrReact r ON t.cntID = r.content.cntID " +
                " WHERE (:cntId IS NULL OR (:cntId IS NOT NULL AND t.cntID = :cntId)) AND " +
                " (:userId IS NULL OR (:userId IS NOT NULL AND t.user.userId = :userId)) " +
                " GROUP BY t.cntID")
        Page<ContentResDTO> findAllBy(@Param("cntId") Long cntId,
                                      @Param("userId") Long userId,
                                      Pageable pageable);

**DTO**

    @Getter
    @Setter
    @JsonIgnoreProperties(ignoreUnknown = true)
    public class ContentResDTO {
        private long id;
        private long userId;
        private String type;
        private String description;
        private int version;
        private Date createdDate;
        private Date modifyDate;
        private int commentCount;
        private int reactCount;
    
        public ContentResDTO(TMnTrContent content, long commentCount, long reactCount) {
            this.id = content.getCntID();
            this.userId = content.getUser().getUserId();
            this.type = content.getCntType();
            this.description = content.getCntDescription();
            this.version = content.getVersion();
            this.createdDate = content.getCreateDate();
            this.modifyDate = content.getModifyDate();
            this.commentCount = (int) commentCount;
            this.reactCount = (int) reactCount;
        }
    
    }